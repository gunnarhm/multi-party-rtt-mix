<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- used by XSLT processors  -->
<!-- OPTIONS, known as processing instructions (PIs) go here. -->
<!-- For a complete list and description of PIs,
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable PIs that most I-Ds might want to use. -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC): -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="2"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references: -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space:
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of popular PIs -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" consensus="true" docName="draft-ietf-avtcore-multi-party-rtt-mix-10" ipr="trust200902" updates="RFC 4103" obsoletes="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="2" symRefs="true" sortRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.42.0 -->
  <front>
    <title abbrev="RTP-mixer format for multi-party RTT">RTP-mixer formatting of multi-party Real-time text</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-avtcore-multi-party-rtt-mix-10"/>
    <author fullname="Gunnar Hellstrom" initials="G" surname="Hellstrom">
      <organization>Gunnar Hellstrom Accessible Communication</organization>
      <address>
        <postal>
          <street></street>
          <city>Vendelso</city>
          <!-- <region/> -->
      <code>13670</code>
          <country>Sweden</country>
        </postal>
        <phone></phone>
        <!-- <facsimile/> -->
      <email>gunnar.hellstrom@ghaccess.se</email>
        <!-- <uri/> -->
      </address>
    </author>
    <date year="2020"/>
			<area>ART</area>
		<workgroup>AVTCore</workgroup>
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
    <abstract>
      <t>
Real-time text mixers for multi-party sessions need to identify the source of each transmitted group of text so that the text can be presented by endpoints in suitable grouping with other text from the same source, while new text from other sources is also presented in readable grouping as received interleaved in real-time.
</t>
      <t>
Regional regulatory requirements specify provision of real-time text in multi-party calls. RFC 4103 mixer implementations can use traditional RTP functions for source identification, but the mixer source switching performance is limited when using the default transmission characteristics with redundancy.
</t>
      <t>
Enhancements for RFC 4103 real-time text mixing is provided in this document, suitable for a centralized conference model that enables source identification and source switching. The intended use is for real-time text mixers and multi-party-aware participant endpoints. The specified mechanism build on the standard use of the CSRC list in the RTP packet for source identification. The method makes use of the same "text/t140" and "text/red" formats as for two-party sessions.
</t>
      <t>
 A capability exchange is specified so that it can be verified that a participant can handle the multi-party coded real-time text stream.  The capability is indicated by use of a media attribute "rtt-mixer".
      </t>
	    <t>
The document updates RFC 4103<xref target="RFC4103" format="default"/>
	    </t>
      <t>
 A specifications of how a mixer can format text for the case when the endpoint is not multi-party aware is also provided.
      </t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>
RFC 4103<xref target="RFC4103" format="default"/> specifies use of RFC 3550 RTP <xref target="RFC3550" format="default"/> for transmission of real-time text (RTT) and the "text/t140" format. It also specifies a redundancy format "text/red" for increased robustness. RFC 4102 <xref target="RFC4102" format="default"/> registers the "text/red" format. Regional regulatory requirements specify provision of real-time text in multi-party calls.
</t>
<t>
  Real-time text is usually provided together with audio and sometimes with video in conversational sessions.
</t>
<t>
A requirement related to multi-party sessions from the presentation level standard T.140 for real-time text is:
"The display of text from the members of the conversation should be arranged so that the text from
each participant is clearly readable, and its source and the relative timing of entered text is visualized
in the display."
</t>
<t>
Another requirement is that the mixing procedure must not introduce delays in the text streams that are experienced disturbing the real-time experience of the receiving users.
</t>
      <t>
The redundancy scheme of RFC 4103 <xref target="RFC4103" format="default"/> enables efficient transmission of redundant text in packets together with new text. However the redundancy header format has no source indicators for the redundant transmissions. The redundant parts in a packet must therefore be from the same source as the new text. The recommended transmission is one new and two redundant generations of text (T140blocks) in each packet and the recommended transmission interval for two-party use is 300 ms.
</t>

<t>
Real-time text mixers for multi-party sessions therefore need to insert the
source of each transmitted group of text from a conference participant so that the text can be transmitted interleaved with text groups from different sources in the rate they are created. This enables the text groups to be presented by endpoints in suitable grouping with other text from the same source. The presentation can then be arranged so that text from different sources can be presented in real-time and easily read while it is possible for a reading user to also perceive approximately when the text was created in real time by the different parties. The transmission and mixing is intended to be done in a general way so that presentation can be arranged in a layout decided by the endpoint.
</t>
 <t>
 There are existing implementations of RFC 4103 without the updates from this document. These will not be able to receive and present real-time text mixed for multi-party aware endpoints.
 </t>
      <t>
	A negotiation mechanism is therefore needed for verification if the parties are able to handle a multi-party coded stream and agreeing on using that method.
</t>
      <t>
	A fall-back mixing procedure is also needed for cases when the negotiation result indicates that a receiving endpoint is not capable of handling the mixed format. This method is called the mixing procedure for multi-party unaware endpoints. The fall-back method is naturally not expected to meet all performance requirements placed on the mixing procedure for multi-party aware endpoints. 
      </t>

	    <t>
	    The document updates RFC 4103<xref target="RFC4103" format="default"/> by introducing an attribute for indicating capability for the multi-party mixing case and rules for source indications and source switching.
	    </t>

	<section numbered="true" toc="default">
		<name>Selected solution and considered alternative</name>
		<t>
    A number of alternatives were considered when searching an efficient and easily implemented multi-party method for real-time text. This section explains a few of them briefly.
    </t>
<dl newline="true">
  <dt>One RTP stream per source, sent in the same RTP session with "text/red" format.</dt>

<dd>
   From some points of view, use of multiple RTP streams, one for each source, sent in the same RTP session,
   called the RTP translator model in <xref target="RFC3550" format="default"/>,
   would be efficient, and use exactly the same packet format as <xref target="RFC4103" format="default"/>,
   the same payload type and a simple SDP declaration.
   However, the RTP implementation in both mixers and endpoints need to support multiple streams in the same RTP session in order to use this mechanism. For best deployment opportunity, it should be possible to upgrade existing endpoint solutions to be multi-party aware with a reasonable effort. There is currently a lack of support for
   multi-stream RTP in certain implementation technologies. This fact made this solution not selected for inclusion in this document.
 </dd>
 <dt>
   The "text/red" format in RFC 4103 with shorter transmission interval, and indicating source in CSRC.
 </dt>
 <dd>
   The "text/red" format with "text/t140" payload in a single RTP stream can be sent with 100 ms packet intervals instead of the regular 300 ms. The source is indicated in the CSRC field. Source switching can then be done every 100 ms while simultaneous transmission occurs. With five participants sending text simultaneously, the switching and transmission performance is good. With more simultaneously sending participants, there will be a noticable jerkiness in text presentation. The jerkiness will be more expressed the more participants who send text simultaneously. With ten sending participants, the jerkiness will be about one second. Text sent from a source at the end of the period its text is sent by the mixer will have close to zero extra delay. Recent text will be presented with no or low delay. The one second jerkiness will be noticable and slightly unpleasant, but corresponds in time to what typing humans often cause by hesitation or changing position while typing. A benefit of this method is that no new packet format needs to be introduced and implemented. Since simultaneous typing by more than two parties is very rare, and in most applications also more than three parties in a call is rare, this method can be used successfully with good performance. Recovery of text in case of packet loss is based on analysis of timestamps of received redundancy versus earlier received text. Negotiation is based on a new sdp media attribute "rtt-mixer". This method is selected to be the main one specified in this document.

 </dd>
    <dt>A new "text" media subtype with up to 15 sources in each packet.</dt>
    <dd>
   The mechanism makes use of the RTP
   mixer model specified in RFC3550<xref target="RFC3550" format="default"/>. Text from up to 15 sources can be included in each packet. Packets are normally sent every 300 ms. The mean delay will be 150 ms. The sources are indicated in strict order in the CSRC list of the RTP packets. A new redundancy packet format is specified. This method would result in good performance, but would require standardisation and implementation of new releases in the target technologies that would take more time than desirable to complete. It was therefore not selected to be included in this document.
</dd>
<dt>The presentation planned by the mixer for multi-party unaware endpoints.</dt>
<dd>
  It is desirable to have a method that does not require any modifications in existing user devices implementing RFC 4103 for RTT without explicit support of multi-party sessions. This is possible by having the mixer insert a new line and a text formatted source label before each switch of text source in the stream. Switch of source can only be done in places in the text where it does not disturb the perception of the contents. Text from only one source can be presented in real time at a time. The delay will therefore be varying. The method has also other limitations, but is included in this document as a fallback method. In calls where parties take turns properly by ending their entries with a new line, the limitations will have limited influence on the user experience. while only two parties send text, these two will see the text in real time with no delay. This method is specified as a fallback method in this document.

</dd>
<dt>
  RTT transport in WebRTC
</dt>
<dd>
  Transport of real-time text in the WebRTC technology is specified to use the WebRTC data channel in <xref target="I-D.ietf-mmusic-t140-usage-data-channel" format="default"/>. That spcification contains a section briefly describing its use in multi-party sessions. The focus of this document is RTP transport. Therefore, even if the WebRTC transport provides good multi-party performance, it is just mentioned in this document in relation to providing gateways with multi-party capabilities between RTP and WebRTC technologies.
</dd>
</dl>

    </section>

    <section numbered="true" toc="default">
      <name>Nomenclature</name>
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
        this document are to be interpreted as described in
        <xref target="RFC2119" format="default"/>.
      </t>
      <t>
	 The terms SDES, CNAME, NAME, SSRC, CSRC, CSRC list, CC, RTCP, RTP-mixer, RTP-translator are explained in <xref target="RFC3550" format="default"/>
      </t>
      <t>
	 The term "T140block" is defined in RFC 4103 <xref target="RFC4103" format="default"/>  to contain one or more T.140 code elements.
      </t>
      <t>
        "TTY" stands for a text telephone type used in North America.
      </t>
      <t>
        "WebRTC" stands for web based communication specified by W3C and IETF.
      </t>
      <t>
        "DTLS-SRTP" stands for security specified in RFC 5764 <xref target="RFC5764" format="default"/>.
      </t>
	  <t>
	  "multi-party aware" stands for an endpoint receiving real-time text from multiple sources through a common conference mixer being able to present the text in real-time separated by source and presented so that a user can get an impression of the approximate relative timing of text from different parties. 
	  </t>
	  <t>
	  "multi-party unaware" stands for an endpoint not itself being able to separate text from different sources when received through a common conference mixer. 
	  </t>

    </section>
    <section numbered="true" toc="default">
      <name>Intended application</name>
      <t>
        The method for multi-party real-time text specified in this document is primarily intended for use in transmission between mixers and endpoints in centralised mixing configurations. It is also applicable between mixers. An often mentioned application is for emergency service calls with real-time text and voice, where a calltaker want to make an attended handover of a call to another agent, and stay observing the session. Multimedia conference sessions with support for participants to contribute in text is another application. Conferences with central support for speech-to-text conversion is yet another mentioned application.
        </t>
        <t>
          In all these applications, normally only one participant at a time will send long text utterances. In some cases, one other participant will occasionally contribute with a longer comment simultaneously. That may also happen in some rare cases when text is interpreted to text in another language in a conference. Apart from these cases, other participants are only expected to contribute with very brief utterings while others are sending text.
        </t>
        <t>
          Text is supposed to be human generated, by some text input means, such as typing on a keyboard or using speech-to-text technology. Occasional small cut-and-paste operations may appear even if that is not the initial purpose of real-time text.
        </t>
        <t>
          The real-time characteristics of real-time text is essential for the participants to be able to contribute to a conversation. If the text is too much delayed from typing a letter to its presentation, then, in some conference situations, the opportunity to comment will be gone and someone else will grab the turn. A delay of more than one second in such situations is an obstacle for good conversation.
        </t>

    </section>
</section>
<section numbered="true" toc="default">
  <name>Overview over the two specified solutions</name>
  <t>
  This section contains a brief introduction of the two methods specified in this document. 
  </t>
  <section anchor="negouse" numbered="true" toc="default">
    <name>Negotiated use of the RFC 4103 format for multi-party transmission in a single RTP stream</name>
    <t>
The main purpose of this document is to specify a method for true multi-party real-time text mixing for multi-party aware endpoints. The method use of the current format for real-time text in <xref target="RFC4103" format="default"/>. It is an update of RFC 4103 by a clarification on one way to use it in the multi-party situation. It is done by completing a negotiation for this kind of multi-party capability and by indicating source in the CSRC element in the RTP packets. Specific considerations are made to be able to recover text after packet loss. 
</t>
<t>
The detailed procedures for the multi-party aware case are specified in <xref target="nego2" format="default"/>
</t>
<t>
   Please use <xref target="RFC4103" format="default"/> as reference when reading the specification.
    </t>
  </section>
  <section numbered="true" toc="default">
    <name>Mixing for multi-party unaware endpoints</name>
<t>
  A method is also specified in this document for cases when the endpoint participating in a multi-party call does not itself implement any solution for multi-party handling of real-time text. The solution requires the mixer to insert text dividers and readable
    labels and only send text from one source at a time until a suitable point appears for source change.
    This solution is a fallback method with functional limitations that acts on the presentation level.
</t>
<t>
A party performing as a mixer, which has not negotiated the "rtt-mixer" sdp media attribute, but negotiated a "text/red"
or "text/t140" format in a session with a participant SHOULD, if nothing else is specified for the application, format
transmitted text to that participant to be suitable to present on a multi-party unaware endpoint as further specified in
<xref target="UnawareFormat" format="default"/>.
</t>
</section>
</section>
<section anchor="nego2" numbered="true" toc="default">
  <name>Details for the multi-party aware mixing case</name>
    <section anchor="nego1" numbered="true" toc="default">
        <name>Offer/answer considerations</name>
      <t>
RFC 4103<xref target="RFC4103" format="default"/> specifies use of RFC 3550 RTP<xref target="RFC3550" format="default"/>, and a redundancy format "text/red" for increased robustness of real-time text transmission.
This document updates RFC 4103<xref target="RFC4103" format="default"/>
by introducing a capability negotiation for handling multi-party real-time text, a way to indicate the source of transmitted text, and rules for efficient timing of the transmissions.
</t>
<t>
The capability negotiation is based on use of the sdp media attribute "rtt-mixer".
</t>
<t>
Both parties shall indicate their capability in a session setup or modification, and evaluate the capability of the counterpart.
</t>
<dl newline="true">
  <dt>The syntax is as follows:</dt>
  <dd>"a=rtt-mixer"</dd>
</dl>
</section>

<section numbered="true" toc="default">
  <name>Actions depending on capability negotiation result</name>

<t>
  A transmitting party SHALL send text according to the multi-party format only when the negotiation for this method was successful and when the CC field in the RTP packet is set to 1. In all other cases, the packets SHALL be populated and interpreted as for a two-party session.
</t>



      <t>
  A party which has negotiated the "rtt-mixer" sdp media attribute MUST populate the CSRC-list and format the packets according to <xref target="nego2" format="default"/>  if it acts as an rtp-mixer and sends multi-party text.
  </t>
      <t>
  A party which has negotiated the "rtt-mixer" sdp media attribute MUST interpret the contents of the "CC" field the CSRC-list and the packets according to <xref target="nego2" format="default"/> in received rtp packets in the corresponding RTP stream.
  </t>
  <t>
  A party not performing as a mixer MUST not include the CSRC list.
      </t>
    </section>
    <section numbered="true" toc="default">
      <name>Use of fields in the RTP packets</name>
<t>
The CC field SHALL show the number of members in the CSRC list, which SHALL be one (1) in transmissions from a mixer involved in a multi-party session, and otherwise 0.
</t>
      <t>
When transmitted from a mixer during a multi-party session, a CSRC list SHALL be included in the packet. The single member in the CSRC-list SHALL contain the SSRC of the source of the T140blocks in the packet. When redundancy is used, the recommended level of redundancy is to use one primary and two redundant generations of T140blocks. In some cases, a primary or redundant T140block is empty, but is still represented by a member in the redundancy header.
</t>
<t>
  From other aspects, the contents of the RTP packets are equal to what is specified in <xref target="RFC4103" format="default"/>.

</t>

    </section>
    <section numbered="true" toc="default">
      <name>Initial transmission of a BOM character</name>
      <t>
      As soon as a participant is known to participate in a session with another entity and being available for text reception, a Unicode BOM character SHALL be sent to it by the other entity according to the procedures in this section. If the transmitter is a mixer, then the source of this character SHALL be indicated to be the mixer itself.
      	    </t>
            <t>
              Note that the BOM character SHALL be transmitted with the same redundancy procedures as any other text.
            </t>
          </section>
          <section numbered="true" toc="default"><name>Keep-alive</name>
      	    <t>
      After that, the transmitter SHALL send keep-alive traffic to the receiver(s) at regular intervals when no other traffic has occurred during that interval, if that is decided for the actual connection. Recommendations for keep-alive can be found in <xref target="RFC6263" format="default"/>.
      	    </t>
          </section>
          <section numbered="true" toc="default"><name>Transmission interval</name>
            <t>
      A "text/red" transmitter in a mixer SHOULD send packets distributed in time as long as there is something (new or  redundant T140blocks) to transmit.  The maximum transmission interval SHOULD then be 300 ms. It is RECOMMENDED to send next packet to a receiver as soon as new text to that receiver is available, as long as the time after the latest sent packet to the same receiver is more than or equal to 100 ms, and also the maximum character rate to the receiver is not exceeded. The intention is to keep the latency low while keeping a good protection against text loss in bursty packet loss conditions.
    </t>
  </section>
  <section numbered="true" toc="default"><name>Only one source per packet</name>
    <t> New and redundant text from one source MAY be transmitted in the same packet. Text from different sources MUST NOT be transmitted in the same packet.
      	    </t>
          </section>
          <section numbered="true" toc="default"><name>Do not send received text to the originating source</name>
            <t>
              Text received to a mixer from a participant SHOULD NOT be included in transmission from the mixer to that participant.
            </t>
          </section>
            <section numbered="true" toc="default"><name>Clean incoming text</name>
            <t>
              A mixer SHALL handle reception, recovery of packet loss, marking of possible text loss and deletion of 'BOM' characters from each participant before queueing received text for transmission to receiving participants.
            </t>
          </section>
          <section numbered="true" toc="default"><name>Redundancy</name>
      	    <t>
      A transmitting party using redundancy SHALL send redundant repetitions of T140blocks aleady transmitted in earlier packets.
    </t>
    <t> The number of redundant generations of T140blocks to include in transmitted packets SHALL be deduced from the SDP negotiation. It SHOULD be set to the minimum of the number declared by the two parties negotiating a connection.
      	    </t>
          </section>
          <section numbered="true" toc="default"><name>Text placement in packets</name>
      	    <t>
      	      At time of transmission, the mixer SHALL populate the RTP packet with all T140blocks queued for transmission originating from the source in turn for transmission as long as this is not in conflict with the allowed number of characters per second ("CPS") or the maximum packet size. The SSRC of the source shall be placed as the only member in the CSRC-list.
      </t>
      <t>
Note: The CSRC-list in an RTP packet only includes the participant who's text is included in text blocks. It is not the same as the total list of participants in a conference. With audio and video media, the CSRC-list would often contain all participants who are not muted whereas text participants that don't type are completely silent and thus are not represented in RTP packet CSRC-lists.
      </t>
      </section>
      <section numbered="true" toc="default"><name>Source switching</name>
      	    <t>
      		    When text from more than one source is available for transmission, the mixer SHALL let the sources take turns in having their text transmitted. When switching from transmission of one source to allow another source to get turn to have its text sent, all intended redundant generations of the last text from the current source MUST be transmitted before text from another source is transmitted.
            </t>
            <t>
               Actively transmitting sources SHOULD be allowed to take turns as frequently as possible to have their text transmitted. That implies that with the recommended redundancy, the mixer SHALL send primary text and two packets with redundant text from the current source before text from another source is transmitted. The source with the oldest text received in the mixer SHOULD be next in turn to get all its available text transmitted.
      	    </t>


          </section>
          <section numbered="true" toc="default"><name>Empty T140blocks</name>
            <t>
      If no unsent T140blocks were available for a source at the time of populating a packet, but T140blocks are available which have not yet been sent the full intended number of redundant transmissions, then the primary T140block for that source is composed of an empty T140block, and populated (without taking up any length) in a packet for transmission. The corresponding SSRC SHALL be placed as usual in its place in the CSRC-list.
      </t>
      <t>
        The first packet in the session, the first after a source switch and the first after a pause SHALL be poulated with the
        available T140blocks for the source in turn to be sent as primary, and empty T140blocks for the agreed number of redundancy generations.
      </t>
      </section>
      <section numbered="true" toc="default"><name>Creation of the redundancy</name>
            <t>
      The primary T140block from a source in the latest transmitted packet is used to populate the first redundant T140block for that source. The first redundant T140block for that source from the latest transmission is placed as the second redundant T140block.
      </t>
            <t>
      Usually this is the level of redundancy used. If a higher number of redundancy is negotiated, then the procedure SHALL be maintained until all available redundant levels of T140blocks are placed in the packet. If a receiver has negotiated a lower number of "text/red" generations, then that level shall be the maximum used by the transmitter.
      </t>
      </section>
      <section numbered="true" toc="default"><name>Timer offset fields</name>
            <t>
      The timestamp offset values are inserted in the redundancy header, with the time offset from the RTP timestamp in the packet when the corresponding T140block was sent from its original source as primary.
      </t>
      <t>
        The timestamp offsets are expressed in the same clock tick units as the RTP timestamp.
      </t>
      <t>
        The timestamp offset values for empty T140blocks have no relevance but SHOULD be assigned realistic values.
      </t>
      </section>
      <section numbered="true" toc="default"><name>Other RTP header fields</name>
            <t>
      The number of members in the CSRC list ( 0 or 1) shall be placed in the "CC" header field. Only mixers place value 1 in the "CC" field.
      </t>
      <t>
                The current time SHALL be inserted in the timestamp.
      </t>
      <t>
        The SSRC of the mixer for the RTT session SHALL be inserted in the SSRC field of the RTP header.
      </t>
      <t>
        The M-bit shall be handled as specified in <xref target="RFC4103" format="default"/>.
      </t>
      </section>
      <section numbered="true" toc="default"><name>Pause in transmission</name>
            <t>
      When there is no new T140block to transmit, and no redundant T140block that has not been retransmitted the intended number of times from any source, the transmission process can stop until either new T140blocks arrive, or a keep-alive method calls for transmission of keep-alive packets.
            </t>
          </section>
          <section numbered="true" toc="default">
            <name>RTCP considerations</name>
            <t>
      A mixer SHALL send RTCP reports with SDES, CNAME and NAME information about the sources in the multi-party call. This makes it possible for participants to compose a suitable label for text from each source.
            </t>
            <t>
              Integrity considerations SHALL be considered when composing these fields.
            </t>
          </section>
    <section numbered="true" toc="default">
      <name>Reception of multi-party contents</name>
      <t>

The "text/red" receiver included in an endpoint with presentation functions will receive RTP packets in the single stream from the mixer, and SHALL distribute the T140blocks for presentation in presentation areas for each source. Other receiver roles, such as gateways or chained mixers are also feasible, and requires consideration if the stream shall just be forwarded, or distributed based on the different sources.
</t>
<section numbered="true" toc="default"><name>Multi-party vs two-party use</name>
      <t>

If the "CC" field value of a received packet is 1, it indicates that multi-party transmission is active, and the receiver MUST be prepared to act on the source according to its role. If the CC value is 0, the connection is point-to-point.

</t>
</section>
<section numbered="true" toc="default"><name>Level of redundancy</name>
<t>
The used level of redundancy generations SHALL be evaluated from the received packet contents. The number of generations (including the primary) is equal to the number of members in the redundancy header.
</t>
</section>
<section numbered="true" toc="default"><name>Extracting text and handling recovery and loss</name>
      <t>
The RTP sequence numbers of the received packets SHALL be monitored for gaps and packets out of order.
</t>
      <t>
As long as the sequence is correct, each packet SHALL be unpacked in order. The T140blocks SHALL be extracted from the primary area, and the corresponding SSRC SHALL be extracted from the CSRC list and used for assigning the new T140block to the correct presentation area (or correspondingly for other receiver roles).
</t>
      <t>
If a sequence number gap appears and is still there after some defined time for jitter resolution, T140data SHALL be recovered from redundant data. If the gap is wider than the number of generations of redundant T140blocks in the packet and it is concluded that t140blocks MAY have been lost, then a t140block SHALL be created with a marker for possible text loss <xref target="T140ad1" format="default"/> and assigned to the SSRC of the transmitter as a general input from the mixer because in general it is not possible to deduce from which source(s) text was lost. It is in some cases possible to deduce that no text was lost even for a gap wider than the redundancy generations, and in some cases it can be concluded which source that likely had loss. Therefore, the receiver MAY insert the marker for possible text loss <xref target="T140ad1" format="default"/> in the presentation area corresponding to the source which may have had loss. See <xref target="pseq" format="default"/>
</t>
      <t>
Then, the T140block in the received packet SHALL be retrieved beginning with the highest redundant generation, and assigning it to the presentation area of that source. Finally the primary T140block SHALL be retrieved from the packet and similarly assigned to the corresponding presentation area for the source.
</t>
      <t>
If the sequence number gap was equal to or less than the number of redundancy generations in the received packet, a missing text marker SHALL NOT be inserted, and instead the T140block and the SSRC fully recovered from the redundancy and primary information and the CSRC-list in the way indicated above.
</t>
</section>
<section numbered="true" toc="default"><name>Delete 'BOM'</name>
      <t>
Unicode character 'BOM' is used as a start indication and sometimes used as a filler or keep alive by transmission implementations. These SHALL be deleted on reception.
</t>
</section>
<section numbered="true" toc="default"><name>Empty T140blocks</name>
      <t>
Empty T140blocks are included as fillers for unused redundancy levels in the packets. They just do not provide any contents and do not contribute to the received streams.
      </t>
    </section>
  </section>
  <section numbered="true" toc="default">
    <name>Performance considerations</name>
    <t>
      This solution has good performance for up to three participants simultaneously sending text. At higher numbers of participants simultaneously sending text, a jerkiness is visible in the presentation of text. With five participants simultaneously transmitting text, the jerkiness is about 1400 ms. Evenso, the transmission of text catches up, so there is no resulting total delay introduced. The solution is therefore suitable for emergency service use, relay service use, and small or well-managed larger multimedia conferences. Only in large unmanaged conferences with a high number of participants there may on very rare occasions appear situations when many participants happen to send text simultaneously, resulting in unpleasantly long switching times. It should be noted that it is only the number of users sending text within the same moment that causes jerkiness, not the total number of users with RTT capability.
    </t>
  </section>

  <section anchor="security2" numbered="true" toc="default">
    <name>Security for session control and media</name>
  <t>

  Security SHOULD be applied on both session control and media. In applications where legacy endpoints without security may exist, a negotiation between security and no security SHOULD be applied. If no other security solution is mandated by the application, then RFC 8643 OSRTP<xref target="RFC8643" format="default"/> SHOULD be applied to negotiate SRTP media security with DTLS. Most SDP examples below are for simplicity expressed without the security additions. The principles (but not all details) for applying DTLS-SRTP security is shown in a couple of the following examples.

  </t>
  </section>

  <section anchor="SDP-examples2" numbered="true" toc="default">
    <name>SDP offer/answer examples</name>
    <t>
      This sections shows some examples of SDP for session negotiation of the real-time text media in SIP sessions. Audio is usually provided in the same session, and sometimes also video. The examples only show the part of importance for the real-time text media.
    </t>

  <artwork name="" type="" align="left" alt=""><![CDATA[

  Offer example for "text/red" format and multi-party support:

        m=text 11000 RTP/AVP 100 98
        a=rtpmap:98 t140/1000
        a=rtpmap:100 red/1000
        a=fmtp:100 98/98/98
        a=rtt-mixer
  ]]></artwork>
  <artwork name="" type="" align="left" alt=""><![CDATA[
   Answer example  from a multi-party capable device
        m=text 14000 RTP/AVP 100 98
        a=rtpmap:98 t140/1000
        a=rtpmap:100 red/1000
        a=fmtp:100 98/98/98
        a=rtt-mixer
   ]]></artwork>
   <artwork name="" type="" align="left" alt=""><![CDATA[

   Offer example for "text/red" format including multi-party
   and security:
         a=fingerprint: SHA-1 \
         4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB
         m=text 11000 RTP/AVP 100 98
         a=rtpmap:98 t140/1000
         a=rtpmap:100 red/1000
         a=fmtp:100 98/98/98
         a=rtt-mixer
   ]]></artwork>
   <t>The "Fingerprint" is sufficient to offer DTLS-SRTP, with the media line still indicating RTP/AVP.
   </t>
   <artwork name="" type="" align="left" alt=""><![CDATA[
    Answer example from a multi-party capable device with security
         a=fingerprint: SHA-1 \
         FF:FF:FF:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB
         m=text 16000 RTP/AVP 100 98
         a=rtpmap:98 t140/1000
         a=rtpmap:100 red/1000
         a=fmtp:100 98/98/98
         a=rtt-mixer
    ]]></artwork>
    <t>
    With the "fingerprint" the device acknowledges use of SRTP/DTLS.
    </t>
   <artwork name="" type="" align="left" alt=""><![CDATA[

  Answer example from a multi-party unaware device that also
  does not support security:

        m=text 12000 RTP/AVP 100 98
        a=rtpmap:98 t140/1000
        a=rtpmap:100 red/1000
        a=fmtp:100 98/98/98
  ]]></artwork>

      </section>
      <section anchor="pseq" numbered="true" toc="default">
      <name>Packet sequence example from a source switch</name>
        <t>

  This example shows a symbolic flow of packets from a mixer including loss and recovery. The sequence includes a source switch. A and B are sources of RTT.
  P indicates primary data. R1 is first redundant generation data and R2 is second redundant generation data. A1, B1, A2 etc are text chunks (T140blocks) received from the respective sources. X indicates dropped packet between the mixer and a receiver. The session is assumed to use original and two redundant generations of RTT.
  </t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  |----------------|
  |Seq no 101      |
  |CC=1            |
  |CSRC list A     |
  |R2: A1          |
  |R1: A2          |
  |P:  A3          |
  |----------------|
  ]]></artwork>
        <t>
  Assuming that earlier packets ( with text A1 and A2) were received in sequence, text A3 is received from packet 101 and assigned to reception area A. The mixer is now assumed to have received text from source B and need to prepare for sending that text. First it must send the redundant generations of text A2 and A3.
  </t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  |----------------|
  |Seq no 102      |
  |CC=1            |
  |CSRC list A     |
  |R2  A2          |
  |R1: A3          |
  |P: Empty        |
  |----------------|
  Nothing needs to be retrieved from this packet. But the receiver
  needs to remember temporarily that it was received.
  ]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  X----------------|
  X Seq no 103     |
  X CC=1           |
  X CSRC list A    |
  X R2: A3         |
  X R1: Empty      |
  X P:  Empty      |
  X----------------|
  Packet 103 is assumed to be dropped in network problems. It was the
  last packet with contents from A before the source switch.
  ]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  X----------------|
  X Seq no 104     |
  X CC=1           |
  X CSRC list B    |
  X R2: Empty      |
  X R1: Empty      |
  X P2: B1         |
  X----------------|
  Packet 104 contains text from B, assumed dropped in network
  problems. The mixer is assumed to have received text from A
  on turn to send. Sending of text from B must therefore be
  temporarily ended by sending redundancy twice.
  ]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  X----------------|
  X Seq no 105     |
  X CC=1           |
  X CSRC list B    |
  X R2: Empty      |
  X R1: B1         |
  X P:  Empty      |
  X----------------|
  Packet 105 is assumed to be dropped in network problems
  ]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  |----------------|
  |Seq no 106      |
  |CC=1            |
  |CSRC list B     |
  | R2: B1         |
  | R1: Empty      |
  | P:  Empty      |
  |----------------|
  ]]></artwork>
  <t>
  Packet 106 is received. The latest received sequence number was 102.
  Recovery is therefore tried for 103,104,105. There is no coverage
  for seq no 103. But knowing that A3 was received as R1 in packet 102,
  it can be concluded that packet 103 just contained A3 as R2 and A3
  was already received and nothing was lost in packet 103.
  </t>
  <t>
  For seqno 104, text B1 is recovered from the second generation redundancy in packet 106 and appended to
  the reception area of B.
  For seqno 105, nothing needs to be recovered.
  No primary text is available in packet 106.
  </t>
  <t>
    After this sequence, A3 and B1 have been received. In this case no text was lost. Even if also packet 102 was lost, it can be concluded that no text was lost.
  </t>
        <t>
  If also packets 101 and 102 were lost, there would be a need to create a marker for possibly lost text  (U'FFFD) <xref target="T140ad1" format="default"/>, inserted generally and possibly also in text sequences A and B.
  </t>
  <t>
    The general conclusion is that if CSRC is equal before and after a gap, only a gap of two can be recovered. If CSRC is different before and after the gap, a gap of 4 can be recovered if the last packet before the gap contained only R2 data, a gap of 3 can be recovered if the last packet before the gap contained R1 data and a gap of 2 can be recovered if the last packet received before the gap contained primary data. For larger gaps than the above, a mark for possible loss needs to be inserted in the received stream from the mixer.
  </t>
    </section>

<section numbered="true" toc="default">
  <name>Maximum character rate "CPS"</name>

	  <t>
	  The default maximum rate of reception of "text/t140" real-time text is in RFC 4103 <xref target="RFC4103" format="default"/> specified to be 30 characters per second. The value MAY be modified in the CPS parameter of the FMTP attribute in the media section for the "text/t140" media. A mixer combining real-time text from a number of sources may occasionally have a higher combined flow of text coming from the sources. Endpoints SHOULD therefore specify a suitable higher value for the CPS parameter, corresponding to its real reception capability. A value for "CPS" of 90 is the default for the "text/t140" stream in the "text/red" format when multi-party real-time text is negotiated. See RFC 4103 <xref target="RFC4103" format="default"/> for the format and use of the CPS parameter. The same rules apply for the multi-party case except for the default value.
	  </t>
    </section>
  </section>

    <section numbered="true" toc="default">
      <name>Presentation level considerations</name>
      <t>
ITU-T T.140 <xref target="T140" format="default"/> provides the presentation level requirements for the RFC 4103 <xref target="RFC4103" format="default"/> transport. T.140 <xref target="T140" format="default"/> has functions for erasure and other formatting functions and has the following general statement for the presentation:
</t>
      <t>
"The display of text from the members of the conversation should be arranged so that the text from
each participant is clearly readable, and its source and the relative timing of entered text is visualized
in the display. Mechanisms for looking back in the contents from the current session should be
provided. The text should be displayed as soon as it is received."
</t>
      <t>
Strict application of T.140 <xref target="T140" format="default"/> is of essence for the interoperability of real-time text implementations and to fulfill the intention that the session participants have the same information of the text contents of the conversation without necessarily having the exact same layout of the conversation.
</t>
      <t>
 T.140 <xref target="T140" format="default"/> specifies a set of presentation control codes to include in the stream. Some of them are optional. Implementations MUST be able to ignore optional control codes that they do not support.
</t>
      <t>
There is no strict "message" concept in real-time text. Line Separator SHALL be used as a separator allowing a part of received text to be grouped in presentation. The characters "CRLF" may be used by other implementations as replacement for Line Separator. The "CRLF" combination SHALL be erased by just one erasing action, just as the Line Separator. Presentation functions are allowed to group text for presentation in smaller groups than the line separators imply and present such groups with source indication together with text groups from other sources (see the following presentation examples). Erasure has no specific limit by any delimiter in the text stream.
</t>
      <section numbered="true" toc="default">
        <name>Presentation by multi-party aware endpoints</name>
        <t>
A multi-party aware receiving party, presenting real-time text MUST separate text from different sources and present them in separate presentation fields.
The receiving party MAY separate presentation of parts of text from a source in readable groups based on other criteria than line separator and merge these groups in the presentation area when it benefits the user to most easily find and read text from the different participants. The criteria MAY e.g. be a received comma, full stop, or other phrase delimiters, or a long pause.
</t>
        <t>
When text is received from multiple original sources, the presentation SHOULD provide a view where text is added in multiple presentation fields.
</t>
        <t>
If the presentation presents text from different sources in one common area, the presenting endpoint SHOULD insert text from the local user ended at suitable points merged with received text to indicate the relative timing for when the text groups were completed. In this presentation mode, the receiving endpoint SHALL present the source of the different groups of text.
</t>
        <t>A view of a three-party RTT call in chat style is shown in this example .</t>

          <artwork name="" type="" align="left" alt=""><![CDATA[
              _________________________________________________
             |                                              |^|
             |[Alice] Hi, Alice here.                       |-|
             |                                              | |
             |[Bob] Bob as well.                            | |
             |                                              | |
             |[Eve] Hi, this is Eve, calling from Paris.    | |
             |      I thought you should be here.           | |
             |                                              | |
             |[Alice] I am coming on Thursday, my           | |
             |      performance is not until Friday morning.| |
             |                                              | |
             |[Bob] And I on Wednesday evening.             | |
             |                                              | |
             |[Alice] Can we meet on Thursday evening?      | |
             |                                              | |
             |[Eve] Yes, definitely. How about 7pm.         | |
             |     at the entrance of the restaurant        | |
             |     Le Lion Blanc?                           | |
             |[Eve] we can have dinner and then take a walk |-|
             |______________________________________________|v|
             | <Eve-typing> But I need to be back to        |^|
             |    the hotel by 11 because I need            |-|
             |                                              | |
             | <Bob-typing> I wou                           |-|
             |______________________________________________|v|
             | of course, I underst                           |
             |________________________________________________|
]]></artwork>

        <t> Figure 3: Example of a three-party RTT call presented in chat style seen at participant 'Alice's endpoint.
</t>
        <t>Other presentation styles than the chat style may be arranged.
</t>
        <t>This figure shows how a coordinated column view
        MAY be presented.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[_____________________________________________________________________
|       Bob          |       Eve            |       Alice           |
|____________________|______________________|_______________________|
|                    |                      |I will arrive by TGV.  |
|My flight is to Orly|                      |Convenient to the main |
|                    |Hi all, can we plan   |station.               |
|                    |for the seminar?      |                       |
|Eve, will you do    |                      |                       |
|your presentation on|                      |                       |
|Friday?             |Yes, Friday at 10.    |                       |
|Fine, wo            |                      |We need to meet befo   |
|___________________________________________________________________|
]]></artwork>
        <t>Figure 4: An example of a coordinated column-view of a three-party
        session with entries ordered vertically in approximate time-order.</t>
      </section>
      <section anchor="UnawareFormat" numbered="true" toc="default">
        <name>Multi-party mixing for multi-party unaware endpoints</name>
        <t>
    When the mixer has indicated multi-party capability by the "rtt-mixer" sdp attribute in an SDP negotiation, but the multi-party capability negotiation fails with an endpoint, then the agreed "text/red" or "text/t140" format SHALL be used and the mixer SHOULD compose a best-effort presentation of multi-party real-time text in one stream intended to be presented by an endpoint with no multi-party awareness.
        </t>
        <t>
	This presentation format has functional limitations and SHOULD be used only to enable participation in multi-party calls by legacy deployed endpoints implementing only RFC 4103 without any multi-party extensions specified in this document.
        </t>
        <t>
	The principles and procedures below do not specify any new protocol elements. They are instead composed from the information in ITU-T T.140 <xref target="T140" format="default"/> and an ambition to provide a best effort presentation on an endpoint which has functions only for two-party calls.
        </t>
        <t>
The mixer mixing for multi-party unaware endpoints SHALL compose a simulated limited multi-party RTT view suitable for presentation in one presentation area. The mixer SHALL group text in suitable groups and prepare for presentation of them by inserting a new line between them if the transmitted text did not already end with a new line. A presentable label SHOULD be composed and sent for the source initially in the session and after each source switch. With this procedure the time for source switching is depending on the actions of the users. In order to expedite source switch, a user can for example end its turn with a new line.
        </t>
        <section numbered="true" toc="default">
          <name>Actions by the mixer at reception from the call participants</name>
          <t>
When text is received by the mixer from the different participants, the mixer SHALL recover text from redundancy if any packets are lost. The mark for lost text <xref target="T140ad1" format="default"/> SHOULD be inserted in the stream if unrecoverable loss appears. Any Unicode "BOM" characters, possibly used for keep-alive shall be deleted.
The time of creation of text (retrieved from the RTP timestamp) SHALL be stored together with the received text from each source in queues for transmission to the recipients.
</t>
        </section>
        <section numbered="true" toc="default">
          <name>Actions by the mixer for transmission to the recipients</name>
          <t>
The following procedure SHOULD be applied for each recipient of multi-part text from the mixer.
</t>
          <t>
The text for transmission SHOULD be formatted by the mixer for each receiving user for presentation in one single presentation area. Text received from a participant SHOULD NOT be included in transmission to that participant. When there is text available for transmission from the mixer to a receiving party from more than one participant, the mixer SHOULD switch between transmission of text from the different sources at suitable points in the transmitted stream.
</t>
          <t>
When switching source, the mixer SHOULD insert a line separator if the already transmitted text did not end with a new line (line separator or CRLF). A label SHOULD be composed from information in the CNAME and NAME fields in RTCP reports from the participant to have its text transmitted, or from other session information for that user. The label SHOULD be delimited by suitable characters (e.g. '[ ]') and transmitted. The CSRC SHOULD indicate the selected source. Then text from that selected participant SHOULD be transmitted until a new suitable point for switching source is reached.
</t>
<t>
  Integrity considerations SHALL be taken when composing the label.
</t>
          <t>
Seeking a suitable point for switching source SHOULD be done when there is older text waiting for transmission from any party than the age of the last transmitted text.
Suitable points for switching are:</t>
          <ul>
            <li>A completed phrase ended by comma</li>
            <li>A completed sentence</li>
            <li>A new line (line separator or CRLF)</li>
            <li>A long pause (e.g. &gt; 10 seconds) in received text from the currently transmitted source</li>
            <li>If text from one participant has been transmitted with text from other sources waiting for transmission for a long time (e.g. &gt; 1 minute) and none of the other suitable points for switching has occurred, a source switch MAY be forced by the mixer at next word delimiter, and also if even a word delimiter does not occur within a time (e.g. 15 seconds) after the scan for word delimiter started.</li>
          </ul>
          <t>
When switching source, the source which has the oldest text in queue SHOULD be selected to be transmitted.
A character display count SHOULD be maintained for the currently transmitted source, starting at zero after the label is transmitted for the currently transmitted source.
</t>
          <t>
The status SHOULD be maintained for the latest control code for Select Graphic Rendition (SGR) from each source.
If there is an SGR code stored as the status for the current source before the source switch is done, a reset of SGR shall be sent by the sequence SGR 0 [009B 0000 006D] after the new line and before the new label during a source switch. See SGR below for an explanation. This transmission does not influence the display count.
</t>
<t>
If there is an SGR code stored for the new source after the source switch, that SGR code SHOULD be transmitted to the recipient before the label. This transmission does not influence the display count.
</t>
        </section>
        <section numbered="true" toc="default">
          <name>Actions on transmission of text</name>
          <t>
Text from a source sent to the recipient SHOULD increase the display count by one per transmitted character.
</t>
 </section>
        <section numbered="true" toc="default">
          <name>Actions on transmission of control codes</name>
          <t>
The following control codes specified by T.140 require specific actions. They SHOULD cause specific considerations in the mixer. Note that the codes presented here are expressed in UCS-16, while transmission is made in UTF-8 transform of these codes.
</t>
          <dl>
            <dt>BEL 0007 Bell</dt>
            <dd> Alert in session, provides for alerting during an active session. The display count SHOULD not be altered.</dd>
            <dt>NEW LINE 2028</dt>
            <dd> Line separator. Check and perform a source switch if appropriate. Increase display count by 1.</dd>
            <dt>CR LF 000D 000A</dt>
            <dd> A supported, but not preferred way of requesting a new line. Check and perform a source switch if appropriate. Increase display count by 1.</dd>
            <dt>INT ESC 0061</dt>
            <dd> Interrupt (used to initiate mode negotiation procedure). The display count SHOULD not be altered.</dd>
            <dt>SGR 009B Ps 006D </dt>
            <dd>Select graphic rendition.  Ps is rendition parameters specified in ISO 6429. The display count SHOULD not be altered. The SGR code SHOULD be stored for the current source.</dd>
            <dt>SOS 0098</dt>
            <dd> Start of string, used as a general protocol element introducer, followed by a maximum 256 bytes string and the ST. The display count SHOULD not be altered.</dd>
            <dt>ST 009C</dt>
            <dd> String terminator, end of SOS string. The display count SHOULD not be altered.</dd>
            <dt>ESC 001B</dt>
            <dd> Escape - used in control strings. The display count SHOULD not be altered for the complete escape code.</dd>
            <dt>Byte order mark "BOM" (U+FEFF)</dt>
            <dd>"Zero width, no break space", used for synchronization and keep-alive. SHOULD be deleted from incoming streams. Shall be sent first after session establishment to the recipient. The display count shall not be altered.</dd>
            <dt>Missing text mark (U+FFFD)</dt>
            <dd> "Replacement character", represented as a question mark in a rhombus, or if that is not feasible, replaced by an apostrophe ', marks place in stream of possible text loss. SHOULD be inserted by the reception procedure in case of unrecoverable loss of packets. The display count SHOULD be increased by one when sent as for any other character.</dd>
            <dt>SGR</dt>
            <dd> If a control code for selecting graphic rendition (SGR), other than reset of the graphic rendition (SGR 0) is sent to a recipient, that control code shall also be stored as status for the source in the storage for SGR status. If a reset graphic rendition (SGR 0) originated from a source is sent, then the SGR status storage for that source shall be cleared.  The display count shall not be increased.</dd>
            <dt>BS (U+0008)</dt>
            <dd> Back Space, intended to erase the last entered character by a source. Erasure by backspace cannot always be performed as the erasing party intended.  If an erasing action erases all text up to the end of the leading label after a source switch, then the mixer must not transmit more backspaces. Instead it is RECOMMENDED that a letter "X" is inserted in the text stream for each backspace as an indication of the intent to erase more. A new line is usually coded by a Line Separator, but the character combination "CRLF" MAY be used instead.  Erasure of a new line is in both cases done by just one erasing action (Backspace). If the display count has a positive value it is decreased by one when the BS is sent. If the display count is at zero, it is not altered.</dd>
          </dl>
        </section>
        <section numbered="true" toc="default">
          <name>Packet transmission</name>
          <t>
    A mixer transmitting to a multi-party unaware terminal SHOULD send primary data only from one source per packet. The SSRC SHOULD be the SSRC of the mixer. The CSRC list SHOULD contain one member and be the SSRC of the source of the primary data.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>Functional limitations</name>
          <t>
    When a multi-party unaware endpoint presents a conversation in one display area in a chat style, it inserts source indications for remote text and local user text as they are merged in completed text groups. When an endpoint using this layout receives and presents text mixed for multi-party unaware endpoints, there will be two levels of source indicators for the received text; one generated by the mixer and inserted in a label after each source switch, and another generated by the receiving endpoint and inserted after each switch between local and remote source in the presentation area. This will waste display space and look inconsistent to the reader.
          </t>
        <t>
    New text can be presented only from one source at a time. Switch of source to be presented takes place at suitable places in the text, such as end of phrase, end of sentence, line separator and inactivity. Therefore the time to switch to present waiting text from other sources may become long and will vary and depend on the actions of the currently presented source.
  </t>
  <t>
    Erasure can only be done up to the latest source switch. If a user tries to erase more text, the erasing actions will be presented as letter X after the label.
		</t>
    <t>
      Text loss because of network errors may hit the label between entries from different parties, causing risk for misunderstanding from which source a piece of text is.
    </t>
  <t>
	These facts makes it strongly RECOMMENDED to implement multi-party awareness in RTT endpoints. The use of the mixing method for multi-party-unaware endpoints should be left for use with endpoints which are impossible to upgrade to become multi-party aware.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>Example views of presentation on multi-party unaware endpoints</name>
          <t>
The following pictures are examples of the view on a participant's display for the multi-party-unaware case.
</t>
          <t/>
          <artwork name="" type="" align="left" alt=""><![CDATA[


  _________________________________________________
 |       Conference       |          Alice          |
 |________________________|_________________________|
 |                        |I will arrive by TGV.    |
 |[Bob]:My flight is to   |Convenient to the main   |
 |Orly.                   |station.                 |
 |[Eve]:Hi all, can we    |                         |
 |plan for the seminar.   |                         |
 |                        |                         |
 |[Bob]:Eve, will you do  |                         |
 |your presentation on    |                         |
 |Friday?                 |                         |
 |[Eve]:Yes, Friday at 10.|                         |
 |[Bob]: Fine, wo         |We need to meet befo     |
 |________________________|_________________________|
]]></artwork>
          <t>Figure 5: Alice who has a conference-unaware client is receiving the multi-party real-time text in a single-stream. This figure shows how a coordinated column view MAY be presented on Alice's device.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  _________________________________________________
 |                                              |^|
 |[Alice] Hi, Alice here.                       |-|
 |                                              | |
 |[mix][Bob] Bob as well.                       | |
 |                                              | |
 |[Eve] Hi, this is Eve, calling from Paris     | |
 |      I thought you should be here.           | |
 |                                              | |
 |[Alice] I am coming on Thursday, my           | |
 |      performance is not until Friday morning.| |
 |                                              | |
 |[mix][Bob] And I on Wednesday evening.        | |
 |                                              | |
 |[Eve] we can have dinner and then walk        | |
 |                                              | |
 |[Eve] But I need to be back to                | |
 |    the hotel by 11 because I need            | |
 |                                              |-|
 |______________________________________________|v|
 | of course, I underst                           |
 |________________________________________________|
 ]]></artwork>
          <t>Figure 6: An example of a view of the multi-party unaware presentation in chat style. Alice is the local user.
          </t>
        </section>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Relation to Conference Control</name>
      <section numbered="true" toc="default">
        <name>Use with SIP centralized conferencing framework</name>
        <t>
  The SIP conferencing framework, mainly specified in RFC 4353<xref target="RFC4353" format="default"/>, RFC 4579<xref target="RFC4579" format="default"/> and RFC 4575<xref target="RFC4575" format="default"/> is suitable for coordinating sessions including multi-party RTT. The RTT stream between the mixer and a participant is one and the same during the conference. Participants get announced by notifications when participants are joining or leaving, and further user information may be provided. The SSRC of the text to expect from joined users MAY be included in a notification. The notifications MAY be used both for security purposes and for translation to a label for presentation to other users.
  </t>
      </section>
        <section anchor="confcontrol" numbered="true" toc="default" ><name>Conference control</name>
        <t>
          In managed conferences, control of the real-time text media SHOULD be provided in the same way as other for media, e.g. for muting and unmuting by the direction attributes in SDP <xref target="RFC4566"/>.
        </t>
        <t>
          Note that floor control functions may be of value for RTT users as well as for users of other media in a conference.
        </t>
      </section>

    </section>
    <section numbered="true" toc="default">
      <name>Gateway Considerations</name>
      <section numbered="true" toc="default">
        <name>Gateway considerations with Textphones (e.g. TTYs).</name>
      <t>
   Multi-party RTT sessions may involve gateways of different kinds. Gateways involved in setting up sessions SHALL correctly reflect the multi-party capability or unawareness of the combination of the gateway and the remote endpoint beyond the gateway.
      </t>
      <t>
   One case that may occur is a gateway to PSTN for communication with textphones (e.g. TTYs). Textphones are limited devices with no multi-party awareness, and it SHOULD therefore be suitable for the gateway to not indicate multi-party awareness for that case. Another solution is that the gateway indicates multi-party capability towards the mixer, and includes the multi-party mixer function for multi-party unaware endpoints itself. This solution makes it possible to make adaptations for the functional limitations of the textphone (TTY).
      </t>
      <t>
   More information on gateways to textphones (TTYs) is found in RFC 5194<xref target="RFC5194" format="default"/>
      </t>

    </section>
      <section numbered="true" toc="default">
        <name>Gateway considerations with WebRTC.</name>
	  <t>
	  Gateway operation to real-time text in WebRTC may also be required. In WebRTC, RTT is specified in <xref target="I-D.ietf-mmusic-t140-usage-data-channel" format="default"/>.
  </t>
  <t>
    A multi-party bridge may have functionality for communicating by RTT both in RTP streams with RTT and WebRTC t140 data channels. Other configurations may consist of a multi-party bridge with either technology for RTT transport and a separate gateway for conversion of the text communication streams between RTP and t140 data channel.
  </t>
  <t>
In WebRTC, it is assumed that for a multi-party session, one t140 data channel is established for each source from a gateway or bridge to each participant. Each participant also has a data channel with two-way connection with the gateway or bridge.
</t>
<t>
  The t140 channel used both ways is for text from the WebRTC user and from the bridge or gateway itself to the WebRTC user. The label parameter of this t140 channel is used as NAME field in RTCP to participants on the RTP side. The other t140 channels are only for text from other participants to the WebRTC user.
</t>
<t>
  When a new participant has entered the session with RTP transport of rtt, a new t140 channel SHOULD be established to WebRTC users with the label parameter composed from the NAME field in RTCP on the RTP side.
</t>
<t>
  When a new participant has entered the multi-party session with RTT transport in a WebRTC t140 data channel, the new participant SHOULD be announced by a notification to RTP users. The label parameter from the WebRTC side SHOULD be used as the NAME RTCP field on the RTP side, or other available session information.
  </t>
</section>
    </section>
    <section numbered="true" toc="default">
      <name>Updates to RFC 4103</name>
  <t>
  This document updates RFC 4103<xref target="RFC4103" format="default"/> by introducing an sdp media attribute "rtt-mixer" for negotiation of multi-party mixing capability with the <xref target="RFC4103" format="default"/> format, and by specifying the rules for packets when multi-party capability is negotiated and in use.
  </t>
	</section>
    <section numbered="true" toc="default">
      <name>Congestion considerations</name>
      <t>
The congestion considerations and recommended actions from RFC 4103 <xref target="RFC4103" format="default"/> are valid also in multi-party situations.
      </t>
      <t>
        The first action in case of congestion SHOULD be to temporarily increase the transmission interval up to two seconds.
      </t>
      <t>
        If the unlikely situation appears that more than 20 participants in a conference send text simultaneously, it will take more than 7 seconds between presentation of text from each of these participants. More time than that can cause confusion in the session. It is therefore RECOMMENDED that the mixer discards such text in excess inserts a general indication of possible text loss <xref target="T140ad1" format="default"/> in the session. If the main text contributor is indicated in any way, the mixer MAY avoid deleting text from that participant.
      </t>
    </section>
    <section anchor="Acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
	    <t>James Hamlin for format and performance aspects.</t>
    </section>

    <section anchor="IANAConsiderations" numbered="true" toc="default">
	    <name>IANA Considerations</name>
      <section anchor="reg-rtt-mix" numbered="true" toc="default">
  <name>Registration of the "rtt-mixer" sdp media attribute</name>
  <t>

[RFC EDITOR NOTE: Please replace all instances of RFCXXXX with the
RFC number of this document.]
</t>
<t>
IANA is asked to register the new sdp attribute "rtt-mixer".
</t>

<dl newline="false">
<dt>Contact name:
</dt>
<dd>IESG
</dd>
<dt>Contact email:
</dt>
<dd>iesg@ietf.org
</dd>
<dt>Attribute name:
</dt>
<dd>rtt-mixer
</dd>
<dt>Attribute semantics:
</dt>
<dd>See RFCXXXX <xref target="nego1"/>
</dd>
<dt>Attribute value:
</dt>
<dd>none
</dd>
<dt>Usage level:
</dt>
<dd>media
</dd>
<dt>Purpose:
</dt>
<dd>Indicate support by mixer and endpoint of multi-party mixing for real-time text transmission, using a common RTP-stream for transmission of text from a number of sources mixed with one source at a time and the source indicated in a single CSRC-list member.
</dd>
<dt>Charset Dependent:
</dt>
<dd>no</dd>
<dt>O/A procedure:
</dt>
<dd>See RFCXXXX <xref target="nego1"/>
</dd>
<dt>Mux Category:
</dt>
<dd>normal
</dd>
<dt>Reference:
</dt>
<dd>RFCXXXX
</dd>
</dl>


</section>

</section>

       <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>

The RTP-mixer model requires the mixer to be allowed to decrypt, pack and encrypt secured text from the conference participants. Therefore the mixer  needs to be trusted. This is similar to the situation for central mixers of audio and video.
</t>
      <t>
The requirement to transfer information about the user in RTCP reports in SDES, CNAME and NAME fields, and in conference notifications, for creation of labels may have privacy concerns as already stated in RFC 3550 <xref target="RFC3550" format="default"/>, and may be restricted of privacy reasons. The receiving user will then get a more symbolic label for the source.
      </t>
    </section>
    <section numbered="true" toc="default">
      <name>Change history</name>
	  <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-10</name>
          <t>
		  </t>
		  </section>
      <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-09</name>
          <t>
            Changed name on the SDP media attribute to "rtt-mixer"
          </t>
          <t>
            Restructure of section 2 for balance between aware and unaware cases.
          </t>
          <t>
            Moved conference control to own section.
          </t>
          <t>
            Improved clarification of recovery and loss in the packet sequence example.
          </t>
          <t>
            A number of editorial corrections and improvements.
          </t>
          </section>
      <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-08</name>
          <t>
            Deleted the method requiring a new packet format "text/rex" because of the longer standardization and implementation period it needs.
          </t>
          <t>
            Focus on use of RFC 4103 text/red format with shorter transmission interval, and source indicated in CSRC.
          </t>
        </section>
      <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-07</name>
          <t>
            Added a method based on the "text/red" format and single source per packet, negotiated by the "rtt-mixer" sdp attribute.
          </t>
          <t>
            Added reasoning and recommendation about indication of loss.
          </t>
          <t>
            The highest number of sources in one packet is 15, not 16. Changed.
          </t>
          <t>
          Added in information on update to RFC 4103 that RFC 4103 explicitly allows addition of FEC method. The redundancy is a kind of forward error correction..
          </t>
        </section>
      <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-06</name>
          <t>
          Improved definitions list format.
          </t>
          <t>
            The format of the media subtype parameters is made to match the requirements.
          </t>
          <t>
            The mapping of media subtype parameters to sdp is included.
          </t>
          <t>
            The CPS parameter belongs to the t140 subtype and does not need to be registered here.
          </t>
        </section>
      <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-05</name>
          <t>
            nomenclature and editorial improvements
          </t>
          <t>
            "this document" used consistently to refer to this document.
          </t>
        </section>
      <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-04</name>
          <t>
'Redundancy header' renamed to 'data header'.
</t>
<t>
  More clarifications added.
</t>
<t>
  Language and figure number corrections.
</t>
        </section>
      <section numbered="true" toc="default">
          <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-03</name>
<t>
Mention possible need to mute and raise hands as for other media.   ---done ----
</t>
<t>
  Make sure that use in two-party calls is also possible and explained. - may need more wording -
</t>
<t>
  Clarify the RTT is often used together with other media. --done--
</t>
<t>
  Tell that text mixing is N-1. A users own text is not received in the mix. -done-
</t>
  <t>
  In 3. correct the interval to:
  A "text/rex" transmitter SHOULD send packets distributed in time as long as there is something (new or  redundant T140blocks) to transmit.  The maximum transmission interval SHOULD then be 300 ms. It is RECOMMENDED to send a packet to a receiver as soon as new text  to that receiver is available, as long as the time after the latest sent packet to the same receiver is more than 150 ms, and also the maximum character rate to the receiver is not exceeded. The intention is to keep the latency low while keeping a good protection against text loss in bursty packet loss conditions.  -done-
</t>
<t>
  In 1.3 say that the format is used both ways. -done-
</t>
<t>
  In 13.1 change presentation area to presentation field so that reader does not think it shall be totally separated. -done-
</t>
<t>
  In Performance and intro, tell the performance in number of simultaneous sending users and introduced delay 16, 150 vs requirements 5 vs 500. -done --
</t>
  <t>
  Clarify redundancy level per connection.  -done-
</t>
<t>
  Timestamp also for the last data header. To make it possible for all text to have time offset as for transmission from the source. Make that header equal to the others. -done-
</t>
<t>
  Mixer always use the CSRC list, even for its own BOM. -done-
</t>
<t>
  Combine all talk about transmission interval (300 ms vs when text has arrived) in section 3 in one paragraph or close to each other. -done-
</t>
<t>
  Documents the goal of good performance with low delay for 5 simultaneous typers in the introduction. -done-
</t>
<t>
  Describe better that only primary text shall be sent on to receivers. Redundancy and loss must be resolved by the mixer. -done-
</t>
    </section>
	  <section numbered="true" toc="default">
        <name>Changes included in draft-ietf-avtcore-multi-party-rtt-mix-02</name>

	<t>
SDP and better description and visibility of security by OSRTP RFC 8634 needed.
</t>
<t>
The description of gatewaying to WebRTC extended.
</t>
<t>
The description of the data header in the packet is improved.


		</t>
		</section>
	    <section numbered="true" toc="default">
        <name>Changes to draft-ietf-avtcore-multi-party-rtt-mix-01</name>
		<t>
		2,5,6 More efficient format "text/rex" introduced and attribute a=rtt-mix deleted.
		</t>
		<t>
		3. Brief about use of OSRTP for security included- More needed.
		</t>

	  	  	       				    <t>
					    4. Brief motivation for the solution and why not rtp-translator is used added to intro.
				       </t>
				       <t>
					    7. More limitations for the multi-party unaware mixing method inserted.
				       </t>
		<t>
		8. Updates to RFC 4102 and 4103 more clearly expressed.
        </t>
		<t>
		9. Gateway to WebRTC started. More needed.
        </t>
		    </section>
	<section numbered="true" toc="default">
        <name>Changes from draft-hellstrom-avtcore-multi-party-rtt-source-03 to draft-ietf-avtcore-multi-party-rtt-mix-00</name>
		<t>
		Changed file name to draft-ietf-avtcore-multi-party-rtt-mix-00
		</t>

		<t>
		Replaced CDATA in IANA registration table with better coding.
		</t>
		<t>
		Converted to xml2rfc version 3.
		</t>
		</section>
	  	       <section numbered="true" toc="default">
        <name>Changes from draft-hellstrom-avtcore-multi-party-rtt-source-02 to -03</name>
		<t>
		Changed company and e-mail of the author.
		</t>
		<t>
		Changed title to "RTP-mixer formatting of multi-party Real-time text"
		to better match contents.
		</t>
		<t>
		Check and modification where needed of use of RFC 2119 words SHALL etc.
		</t>
		<t>
		More about the CC value in sections on transmitters and receivers so that 1-to-1 sessions do not use the mixer format.
		</t>
		<t>
		Enhanced section on presentation for multi-party-unaware endpoints
		</t>
		<t>
		A paragraph recommending CPS=150 inserted in the performance section.
		</t>
		</section>
	       <section numbered="true" toc="default">
        <name>Changes from draft-hellstrom-avtcore-multi-party-rtt-source-01 to -02</name>
        <t>
In Abstract and 1. Introduction: Introduced wording about regulatory requirements.
</t>
        <t>
In section 5: The transmission interval is decreased to 100 ms when there is text from more than one source to transmit.
</t>
        <t>
In section 11 about SDP negotiation, a SHOULD-requirement is introduced that the mixer should make a mix for multi-party unaware endpoints if the negotiation is not successful. And a reference to a later chapter about it.
</t>
        <t>
The presentation considerations chapter 14 is extended with more information about presentation on multi-party aware endpoints, and a new section on the multi-party unaware mixing with low functionality but SHOULD a be implemented in mixers. Presentation examples are added.
</t>
        <t>
A short chapter 15 on gateway considerations is introduced.
</t>
        <t>
Clarification about the text/t140 format included in chapter 10.
</t>
        <t>
This sentence added to the chapter 10 about use without redundancy. "The text/red format SHOULD be used unless some other protection against packet loss is utilized, for example a reliable network or transport."
</t>
        <t>
Note about deviation from RFC 2198 added in chapter 4.
</t>
        <t>
In chapter 9.  "Use with SIP centralized conferencing framework" the following note is inserted:
Note: The CSRC-list in an RTP packet only includes participants who's text is included in one or more text blocks. It is not the same as the list of participants in a conference. With audio and video media, the CSRC-list would often contain all participants who are not muted whereas text participants that don't type are completely silent and so don't show up in RTP packet CSRC-lists.
</t>
        <t>



        </t>
      </section>
      <section numbered="true" toc="default">
        <name>Changes from draft-hellstrom-avtcore-multi-party-rtt-source-00 to -01</name>
        <t>
          Editorial cleanup.
        </t>
        <t>
          Changed capability indication from fmtp-parameter to SDP attribute "rtt-mix".
        </t>
        <t>
          Swapped order of redundancy elements in the example to match reality.
        </t>
        <t>
          Increased the SDP negotiation section
        </t>
      </section>

    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4102.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4103.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3550.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4566.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5764.xml"/>
	<xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6263.xml"/>
		<xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8643.xml"/>
	<xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-mmusic-t140-usage-data-channel.xml"/>
	<reference anchor="T140" target="https://www.itu.int/rec/T-REC-T.140-199802-I/en">
          <front>
            <title>Recommendation ITU-T T.140 (02/1998), Protocol for
             multimedia application text conversation</title>
            <author>
              <organization>ITU-T</organization>
            </author>
            <date year="1998" month="February"/>
          </front>
        </reference>
        <reference anchor="T140ad1" target="https://www.itu.int/rec/T-REC-T.140-200002-I!Add1/en">
          <front>
            <title>Recommendation ITU-T.140 Addendum 1 - (02/2000), Protocol for
             multimedia application text conversation</title>
            <author>
              <organization>ITU-T</organization>
            </author>
            <date year="2000" month="February"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4353.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4579.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4575.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5194.xml"/>
      </references>
    </references>
  </back>
</rfc>
